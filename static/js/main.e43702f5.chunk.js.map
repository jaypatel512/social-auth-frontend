{"version":3,"sources":["App.js","serviceWorker.js","index.js","config.js"],"names":["App","state","isAuthenticated","user","token","logout","_this","setState","googleResponse","response","console","log","accessToken","tokenBlob","Blob","JSON","stringify","access_token","type","fetch","crossDomain","method","body","mode","cache","then","r","headers","get","json","onFailure","err","alert","content","this","react_default","a","createElement","email","onClick","google_login_default","clientId","config","GOOGLE_CLIENT_ID","buttonText","onSuccess","className","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"qSAoFeA,6MA9EbC,MAAQ,CACNC,iBAAiB,EACjBC,KAAM,KACNC,MAAO,MAGTC,OAAS,WACPC,EAAKC,SAAS,CACZL,iBAAiB,EACjBC,KAAM,KACNC,MAAO,QAIXI,eAAiB,SAAAC,GACfC,QAAQC,IAAIF,GADe,IAEnBG,EAAgBH,EAAhBG,YAEFC,EAAY,IAAIC,KACpB,CACEC,KAAKC,UACH,CACEC,aAAcL,GAEhB,KACA,IAGJ,CAAEM,KAAM,qBAGVR,QAAQC,IAAIE,GAUZM,MAAM,2DARU,CACdC,aAAa,EACbC,OAAQ,OACRC,KAAMT,EACNU,KAAM,OACNC,MAAO,YAGkEC,KAAK,SAAAC,GAC9E,IAAMtB,EAAQsB,EAAEC,QAAQC,IAAI,gBAC5BF,EAAEG,OAAOJ,KAAK,SAAAtB,GACRC,GACFE,EAAKC,SAAS,CACZL,iBAAiB,EACjBC,OACAC,iBAOV0B,UAAY,SAAAC,GACVC,MAAMD,4EAIN,IAAIE,EAAYC,KAAKjC,MAAMC,gBACzBiC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAIH,KAAKjC,MAAME,KAAKmC,OACpBH,EAAAC,EAAAC,cAAA,UAAQE,QAASL,KAAK7B,QAAtB,YAIJ8B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAaK,SAAUC,IAAOC,iBAAkBC,WAAW,oBAAoBC,UAAWX,KAAK1B,eAAgBsB,UAAWI,KAAK1B,kBAInI,OAAO2B,EAAAC,EAAAC,cAAA,OAAKS,UAAU,OAAOb,UA3Efc,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,KAAK,SAAAqC,GACjCA,EAAaC,gCEnInBC,EAAOC,QAAU,CACbtB,iBAAkB","file":"static/js/main.e43702f5.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport GoogleLogin from \"react-google-login\";\nimport config from \"./config\";\n\nclass App extends React.Component {\n  state = {\n    isAuthenticated: false,\n    user: null,\n    token: \"\"\n  };\n\n  logout = () => {\n    this.setState({\n      isAuthenticated: false,\n      user: null,\n      token: \"\"\n    });\n  };\n\n  googleResponse = response => {\n    console.log(response);\n    const { accessToken } = response;\n\n    const tokenBlob = new Blob(\n      [\n        JSON.stringify(\n          {\n            access_token: accessToken\n          },\n          null,\n          2\n        )\n      ],\n      { type: \"application/json\" }\n    );\n\n    console.log(tokenBlob);\n\n    const options = {\n      crossDomain: true,\n      method: \"POST\",\n      body: tokenBlob,\n      mode: \"cors\",\n      cache: \"default\"\n    };\n\n    fetch(\"https://fast-peak-93888.herokuapp.com/api/v1/auth/google\", options).then(r => {\n      const token = r.headers.get(\"x-auth-token\");\n      r.json().then(user => {\n        if (token) {\n          this.setState({\n            isAuthenticated: true,\n            user,\n            token\n          });\n        }\n      });\n    });\n  };\n\n  onFailure = err => {\n    alert(err);\n  };\n\n  render() {\n    let content = !!this.state.isAuthenticated ? (\n      <div>\n        <div>Authenticated</div>\n        <div>\n          <p>{this.state.user.email}</p>\n          <button onClick={this.logout}>Logout</button>\n        </div>\n      </div>\n    ) : (\n      <div>\n        <GoogleLogin clientId={config.GOOGLE_CLIENT_ID} buttonText=\"Login With Google\" onSuccess={this.googleResponse} onFailure={this.googleResponse} />\n      </div>\n    );\n\n    return <div className=\"App\">{content}</div>;\n  }\n}\n\nexport default App;\n\n// Secret: 4h67stmhkV3FuH4c_7pRvshl\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = {\n    GOOGLE_CLIENT_ID: '342500701371-7uerab7g7elio93g9g8eukq0i3ad55jh.apps.googleusercontent.com'\n}"],"sourceRoot":""}